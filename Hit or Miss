import numpy as np 
from scipy.ndimage import binary_erosion 
import matplotlib.pyplot as plt  # Only for visualization 
 
def hit_or_miss(image, hit_kernel, miss_kernel): 
    binary_image = (image > 127).astype(np.uint8) 
    complement_image = 1 - binary_image 
    hit_eroded = binary_erosion(binary_image, structure=hit_kernel)  
    miss_eroded = binary_erosion(complement_image, structure=miss_kernel)
    result = hit_eroded & miss_eroded 
   return binary_image * 255, complement_image * 255, result.astype(np.uint8) * 255  
binary_image = np.array([[0, 0, 1, 0, 0], 
                         [0, 0, 1, 0, 0], 
                         [1, 1, 1, 1, 1], 
                         [0, 0, 1, 0, 0], 
                         [0, 0, 1, 0, 0]], dtype=np.uint8) * 255   
hit_kernel = np.array([[0, 1, 0], 
                       [1, 1, 1], 
                       [0, 1, 0]], dtype=np.uint8) 
 
miss_kernel = np.array([[1, 0, 1], 
                        [0, 0, 0], 
                        [1, 0, 1]], dtype=np.uint8)  
binary_img, complement_img, hit_miss_result = hit_or_miss(binary_image, hit_kernel, miss_kernel) 
 
fig, axes = plt.subplots(2, 3, figsize=(10, 7)) 
axes[0, 0].imshow(binary_img, cmap="gray") 
axes[0, 0].set_title("Original Binary Image") 
axes[0, 0].axis("off") 
axes[0, 1].imshow(complement_img, cmap="gray") 
axes[0, 1].set_title("Complement Image") 
axes[0, 1].axis("off")  
axes[0, 2].imshow(hit_kernel, cmap="gray") 
axes[0, 2].set_title("Hit Kernel (Foreground)") 
axes[0, 2].axis("off") 
axes[1, 0].imshow(miss_kernel, cmap="gray") 
axes[1, 0].set_title("Miss Kernel (Background)") 
axes[1, 0].axis("off") 
axes[1, 1].imshow(hit_miss_result, cmap="gray") 
axes[1, 1].set_title("Hit-or-Miss Result") 
axes[1, 1].axis("off") 
axes[1, 2].axis("off") 
plt.tight_layout() 
plt.show() 
